#!/bin/bash

#Setting Proxy variables
PROXY_IP="127.0.0.1"
PROXY_PORT="8080"
PROXY_CA_CERT="/usr/local/safesquid/security/ssl/ROOT_X509File.cer"

#Output message in json format
JSON_OUT () {
    TEST=${1}
    RESULT=${2}
    MSG=${3}
    EXIT=${4}
    printf '{"TEST":"%s","RESULT":"%s","MSG":"%s"}\n' "${TEST}" "${RESULT}" "${MSG}" 
    [ "x${EXIT}" == "x1" ] && exit 1
}

#Output message in xml format
XML_OUT() {
    TEST="${1}"
    RESULT="${2}"
    MSG="${3}"
    EXIT="${4}"
    
    # Generate the XML output
    printf '<auto_diagnose>\n'
    printf '    <TEST>%s</TEST>\n' "${TEST}"
    printf '    <RESULT>%s</RESULT>\n' "${RESULT}"
    printf '    <MSG><![CDATA[%s]]></MSG>\n' "${MSG}"
    printf '</auto_diagnose>\n'

    [ "x${EXIT}" == "x1" ] && exit 1
}

#Ok message to print
OK_MSG () {
    INFO="${@}"
    RESULT="SUCCESS"
    MESSAGE="${INFO}"
    EXIT="0"
}

#Error message to print
ERR_MSG () {
    INFO="${@}"
    RESULT="ERROR"
    MESSAGE="${INFO}"
    EXIT="1"
}

#Set hosname and protocol.
SET_HOST_PROTO () {
    URL="${1}"
    [ "x${URL}" == "x" ] && ERR_MSG "NOT INPUT RECEIVED" && exit 1;
    HOST=$(echo ${URL} | awk -F'[/:]' '{print $4}')
    PROTO=$(echo ${URL} | awk -F'[/:]' '{print $1}')
}

#Set port to use
SET_PORT () {
    PORT=$(echo ${URL} | awk -F'[/:]' '{print $5}')
    [[ "${PORT}" =~ ^[0-9]+$  ]] && return;
    [ "x${PROTO}" == "xhttp" ] && PORT="80" && return;
    [ "x${PROTO}" == "xhttps" ] && PORT="443" 
}

#DNS Check - usig nslookup check the DNS resolution for the specified host
DNS_CHECK () {
    local TEST RESULT MESSAGE RESPONSE
    #Set Test Conditions
    TEST="DNS CHECK"
    #EXEC Test
    RESPONSE=$(dig +short "${HOST}" | grep '^[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+$' | head -n 1)
    RESPONSE_VERBOSE=$(dig +short "${HOST}" )
    [ ! -z "${RESPONSE}" ] && OK_MSG "${RESPONSE_VERBOSE}" || ERR_MSG "${RESPONSE_VERBOSE}"
    XML_OUT "${TEST}" "${RESULT}" "${MESSAGE}" "${EXIT}"
}

#Port Check - using telnet check the connectivity to the specified host with the speicifed port
PORT_CHECK () {
    local TEST RESULT MESSAGE RESPONSE
    TEST="PORT CHECK"
    RESPONSE=$(echo "" | telnet ${HOST} ${PORT} -E -d 2>&1 | awk '$1 ~ /Connected/')
    RESPONSE_VERBOSE=$(echo "" | telnet ${HOST} ${PORT} -E -d 2>&1 )
    [ ! -z "${RESPONSE}" ] && OK_MSG "${RESPONSE_VERBOSE}" || ERR_MSG "${RESPONSE_VERBOSE}"
    XML_OUT "${TEST}" "${RESULT}" "${MESSAGE}" "${EXIT}"
}

#Check SSL certificate of given host
SSL_CHECK () {
    local TEST RESULT MESSAGE RESPONSE RESPONSE_VERBOSE
    TEST="SSL CERT CHECK"
    RESPONSE=$(echo "" | openssl s_client -brief  -connect "${HOST}:${PORT}" -verify_hostname ${HOST} 2>&1 | awk -F':' '$1 ~ /Verification/ {print$2}')
    RESPONSE_VERBOSE=$(echo "" | openssl s_client -brief -state -connect "${HOST}:${PORT}" -verify_hostname ${HOST} 2>&1 )
    [ "x${RESPONSE}" == "x OK" ] && OK_MSG "${RESPONSE_VERBOSE}" || ERR_MSG "${RESPONSE_VERBOSE}"
    XML_OUT "${TEST}" "${RESULT}" "${MESSAGE}" "${EXIT}"
}

#Check the connectivity direct.
CONNECTIVITY_CHECK () {
    local TEST RESULT MESSAGE
    TEST="REMOTE SERVER RESPONSE CHECK"
    RESPONSE=$(curl -sS -L ${URL} --head | awk '$1 ~ /^HTTP\/[1-2]/ {LM=$0} END {if (LM) {split(LM, fields, " "); print fields[2]}}') 
    RESPONSE_VERBOSE=$(curl -sS -L ${URL} --head ) 
    [[ "$RESPONSE" -ge 200 && "$RESPONSE" -lt 400 ]] && OK_MSG "${RESPONSE_VERBOSE}" || ERR_MSG "${RESPONSE_VERBOSE}"
    XML_OUT "${TEST}" "${RESULT}" "${MESSAGE}" "${EXIT}"
}

#Check the connectivity via proxy.
PROXY_CONNECTIVITY_CHECK () {
    local TEST RESULT MESSAGE
    TEST="PROXY CONNECTIVITY CHECK"
    RESPONSE=$(echo "" | telnet ${PROXY_IP} ${PROXY_PORT} -E -d 2>&1 | awk '$1 ~ /Connected/')
    RESPONSE_VERBOSE=$(echo "" | telnet ${PROXY_IP} ${PROXY_PORT} -E -d 2>&1 )
    [ ! -z "${RESPONSE}" ] && OK_MSG "${RESPONSE_VERBOSE}" || ERR_MSG "${RESPONSE_VERBOSE}"
    XML_OUT "${TEST}" "${RESULT}" "${MESSAGE}" "${EXIT}"
}

#Check SSL certificate of given host via proxy
PROXY_SSL_CHECK () {
    local TEST RESULT MESSAGE RESPONSE RESPONSE_VERBOSE
    TEST="SSL CERT CHECK VIA PROXY"
    RESPONSE=$(echo "" | openssl s_client -brief -proxy ${PROXY_IP}:${PROXY_PORT} -CAfile ${PROXY_CA_CERT} -connect "${HOST}:${PORT}" -verify_hostname ${HOST} 2>&1 | awk -F':' '$1 ~ /Verification/ {print$2}')
    RESPONSE_VERBOSE=$(echo "" | openssl s_client -brief -state -connect "${HOST}:${PORT}" -verify_hostname ${HOST} 2>&1 )
    [ "x${RESPONSE}" == "x OK" ] && OK_MSG "${RESPONSE_VERBOSE}" || ERR_MSG "${RESPONSE_VERBOSE}"
    XML_OUT "${TEST}" "${RESULT}" "${MESSAGE}" "${EXIT}"
}

#Check SSL certificate of given host via proxy
PROXY_RESPONSE_CHECK () {
    local TEST RESULT MESSAGE RESPONSE RESPONSE_VERBOSE
    TEST="REMOTE SERVER RESPONSE CHECK VIA PROXY"
    RESPONSE=$(curl -Ss -L --proxy ${PROXY_IP}:${PROXY_PORT} --cacert ${PROXY_CA_CERT} "${URL}" --head | awk '$1 ~ /^HTTP\/[1-2]/ {LM=$0} END {if (LM) {split(LM, fields, " "); print fields[2]}}') 
    RESPONSE_VERBOSE=$(curl -Ss -L --proxy ${PROXY_IP}:${PROXY_PORT} --cacert ${PROXY_CA_CERT} "${URL}" --head) 
    [[ "$RESPONSE" -ge 200 && "$RESPONSE" -lt 400 ]] && OK_MSG "${RESPONSE_VERBOSE}" || ERR_MSG "${RESPONSE_VERBOSE}"
    XML_OUT "${TEST}" "${RESULT}" "${MESSAGE}" "${EXIT}"
}

#MAIN Function
MAIN () {
    SET_HOST_PROTO "${1}"
    SET_PORT
    DNS_CHECK
    PORT_CHECK
    [ "x${PROTO}" == "xhttps" ] && SSL_CHECK
    CONNECTIVITY_CHECK
    PROXY_CONNECTIVITY_CHECK
    PROXY_SSL_CHECK
    PROXY_RESPONSE_CHECK
}


# Loop and listen for user inputs
while true
do
    if read -t 1 INPUT
    then
        MAIN ${INPUT}
    else
        # No input, sleep for a bit to prevent high CPU usage
        sleep 1
    fi
done
