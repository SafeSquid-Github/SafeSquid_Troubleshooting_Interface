#!/bin/bash

#Setting Proxy variables
PROXY_IP="127.0.0.1"
PROXY_PORT="8080"
PROXY_CA_CERT="/usr/local/safesquid/security/ssl/ROOT_X509File.cer"

#Output message in xml format
XML_OUT() {
    TEST=$(base64 <<< "${1}" | tr -d '\n')
    INFO=$(base64 <<< "${2}" | tr -d '\n' )
    COMMAND_EXEC=$(base64 <<< "${3}" | tr -d '\n' )
    RESULT=$(base64 <<< "${4}" | tr -d '\n' )
    MSG=$(base64 <<< "${5}" | tr -d '\n' )
    EXIT="${6}"

    # Generate the XML output using a single printf
    printf '<auto_diagnose><TEST>%s</TEST><INFO>%s</INFO><COMMAND>%s</COMMAND><RESULT>%s</RESULT><MSG><![CDATA[%s]]></MSG></auto_diagnose>\n' "${TEST}" "${INFO}" "${COMMAND_EXEC}" "${RESULT}" "${MSG}"
    [ "x${EXIT}" == "x1" ] && exit 1
}

#Ok message to print
OK_MSG () {
    local INFO
    INFO="${*}"
    RESULT="SUCCESS"
    MESSAGE="${INFO}"
    EXIT="0"
}

#Error message to print
ERR_MSG () {
    local INFO
    INFO="${*}"
    RESULT="ERROR"
    MESSAGE="${INFO}"
    EXIT="1"
}

#Set hosname and protocol.
SET_HOST_PROTO () {
    URL="${1}"
    [ "x${URL}" == "x" ] && ERR_MSG "NOT INPUT RECEIVED" && exit 1;
    HOST=$(awk -F'[/:]' '{print $4}' <<< "${URL}")
    PROTO=$(awk -F'[/:]' '{print $1}' <<< "${URL}")
}

#Set port to use
SET_PORT () {
    PORT=$(awk -F'[/:]' '{print $5}' <<< "${URL}")
    [[ "${PORT}" =~ ^[0-9]+$  ]] && return;
    [ "x${PROTO}" == "xhttp" ] && PORT="80" && return;
    [ "x${PROTO}" == "xhttps" ] && PORT="443" 
}

#DNS Check - usig nslookup check the DNS resolution for the specified host
DNS_CHECK () {
    local TEST RESULT MESSAGE RESPONSE
    TEST="DNS CHECK"
    INFO="DNS LOOKUP FOR HOSTNAME: ${HOST}"
    COMMAND="dig +short ${HOST}"
    RESPONSE_VERBOSE=$(exec ${COMMAND})
    RESPONSE=$(awk '/^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$/ {print; exit}' <<< "${RESPONSE_VERBOSE}" )
    [ ! -z "${RESPONSE}" ] && OK_MSG "${RESPONSE_VERBOSE}" || ERR_MSG "${RESPONSE_VERBOSE}"
    XML_OUT "${TEST}" "${INFO}" "${COMMAND}" "${RESULT}" "${MESSAGE}" "${EXIT}"
}

#Port Check - using telnet check the connectivity to the specified host with the speicifed port
PORT_CHECK () {
    local TEST RESULT MESSAGE RESPONSE
    TEST="PORT CHECK"
    INFO="CONNECTING ${HOST} ON PORT ${PORT}"
    COMMAND="telnet ${HOST} ${PORT}"
    RESPONSE_VERBOSE=$(echo "" | exec ${COMMAND} 2>&1 | sed '3,$d' )
    RESPONSE=$(awk '$1 ~ /Connected/' <<< "${RESPONSE_VERBOSE}" )
    [ ! -z "${RESPONSE}" ] && OK_MSG "${RESPONSE_VERBOSE}" || ERR_MSG "${RESPONSE_VERBOSE}"
    XML_OUT "${TEST}" "${INFO}" "${COMMAND}" "${RESULT}" "${MESSAGE}" "${EXIT}"
}

#Check SSL certificate of given host
SSL_CHECK () {
    local TEST RESULT MESSAGE RESPONSE RESPONSE_VERBOSE
    TEST="SSL CERT CHECK"
    INFO="SERVER CERTIFICATE VERIFICATION FOR HOST ${HOST}"
    COMMAND="openssl s_client -brief  -connect "${HOST}:${PORT}" -verify_hostname ${HOST}"
    RESPONSE_VERBOSE=$(echo "" | exec ${COMMAND} 2>&1 )
    RESPONSE=$(awk -F':' '$1 ~ /Verification/ {print$2}' <<< "${RESPONSE_VERBOSE}" )
    [ "x${RESPONSE}" == "x OK" ] && OK_MSG "${RESPONSE_VERBOSE}" || ERR_MSG "${RESPONSE_VERBOSE}"
    XML_OUT "${TEST}" "${INFO}" "${COMMAND}" "${RESULT}" "${MESSAGE}" "${EXIT}"
}

#Check the connectivity direct.
RESPONSE_CHECK () {
    local TEST RESULT MESSAGE
    TEST="REMOTE SERVER RESPONSE CHECK"
    INFO="VALIDATING WEBSERVER RESPONSE FOR HOST ${HOST}"
    COMMAND="curl -sS -L ${URL} --head"
    RESPONSE_VERBOSE="$(exec ${COMMAND}) "
    RESPONSE="$(awk '$1 ~ /^HTTP\/[1-2]/ {LM=$0} END {if (LM) {split(LM, fields, " "); print fields[2]}}' <<< "${RESPONSE_VERBOSE}" )" 
    [[ "$RESPONSE" -ge 200 && "$RESPONSE" -lt 400 ]] && OK_MSG "${RESPONSE_VERBOSE}" || ERR_MSG "${RESPONSE_VERBOSE}"
    XML_OUT "${TEST}" "${INFO}" "${COMMAND}" "${RESULT}" "${MESSAGE}" "${EXIT}"
}

#Check the connectivity via proxy.
PROXY_CONNECTIVITY_CHECK () {
    local TEST RESULT MESSAGE
    TEST="PROXY CONNECTIVITY CHECK"
    INFO="CHECK PROXY CONNECTIVITY ON PROXY IP ${PROXY_IP} & PORT ${PROXY_PORT}"
    COMMAND="telnet ${PROXY_IP} ${PROXY_PORT}"
    RESPONSE_VERBOSE=$(echo "" | exec ${COMMAND} 2>&1 | sed '3,$d' )
    RESPONSE=$(awk '$1 ~ /Connected/' <<< "${RESPONSE_VERBOSE}")
    [ ! -z "${RESPONSE}" ] && OK_MSG "${RESPONSE_VERBOSE}" || ERR_MSG "${RESPONSE_VERBOSE}"
    XML_OUT "${TEST}" "${INFO}" "${COMMAND}" "${RESULT}" "${MESSAGE}" "${EXIT}"
}

#Check SSL certificate of given host via proxy
PROXY_SSL_CHECK () {
    local TEST RESULT MESSAGE RESPONSE RESPONSE_VERBOSE
    TEST="SSL CERT CHECK VIA PROXY"
    INFO="SERVER CERTIFICATE VERIFICATION FOR HOST ${HOST} USING PROXY ${PROXY_IP}:${PROXY_PORT}"
    COMMAND="openssl s_client -brief -proxy ${PROXY_IP}:${PROXY_PORT} -CAfile ${PROXY_CA_CERT} -connect "${HOST}:${PORT}" -verify_hostname ${HOST}"
    RESPONSE_VERBOSE=$(echo "" | exec ${COMMAND} 2>&1 )
    RESPONSE=$(awk -F':' '$1 ~ /Verification/ {print$2}' <<< "${RESPONSE_VERBOSE}")
    [ "x${RESPONSE}" == "x OK" ] && OK_MSG "${RESPONSE_VERBOSE}" || ERR_MSG "${RESPONSE_VERBOSE}"
    XML_OUT "${TEST}" "${INFO}" "${COMMAND}" "${RESULT}" "${MESSAGE}" "${EXIT}"
}

#Check SSL certificate of given host via proxy
PROXY_RESPONSE_CHECK () {
    local TEST RESULT MESSAGE RESPONSE RESPONSE_VERBOSE
    TEST="REMOTE SERVER RESPONSE CHECK VIA PROXY"
    INFO="VALIDATING WEBSERVER RESPONSE FOR HOST ${HOST} VIA PROXY"
    COMMAND="curl -Ss -L --proxy ${PROXY_IP}:${PROXY_PORT} --cacert ${PROXY_CA_CERT} ${URL} --head"
    RESPONSE_VERBOSE=$(exec ${COMMAND}) 
    RESPONSE=$(awk '$1 ~ /^HTTP\/[1-2]/ {LM=$0} END {if (LM) {split(LM, fields, " "); print fields[2]}}' <<< "${RESPONSE_VERBOSE}" ) 
    [[ "$RESPONSE" -ge 200 && "$RESPONSE" -lt 400 ]] && OK_MSG "${RESPONSE_VERBOSE}" || ERR_MSG "${RESPONSE_VERBOSE}"
    XML_OUT "${TEST}" "${INFO}" "${COMMAND}" "${RESULT}" "${MESSAGE}" "${EXIT}"
}

#MAIN Function
MAIN () {
    SET_HOST_PROTO "${1}"
    SET_PORT
    DNS_CHECK
    PORT_CHECK
    [ "x${PROTO}" == "xhttps" ] && SSL_CHECK
    RESPONSE_CHECK
    PROXY_CONNECTIVITY_CHECK
    [ "x${PROTO}" == "xhttps" ] && PROXY_SSL_CHECK
    PROXY_RESPONSE_CHECK
}

#Loop and listen for user inputs
while true
do
    if read -t 1 INPUT
    then
        MAIN ${INPUT}
    fi
done