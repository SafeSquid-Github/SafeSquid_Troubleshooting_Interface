#!/bin/bash

# Black        0;30     Dark Gray     1;30
# Red          0;31     Light Red     1;31
# Green        0;32     Light Green   1;32
# Brown/Orange 0;33     Yellow        1;33
# Blue         0;34     Light Blue    1;34
# Purple       0;35     Light Purple  1;35
# Cyan         0;36     Light Cyan    1;36
# Light Gray   0;37     White         1;37
#Color output
CYAN='\033[1;36m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

#Get IP address for narrowed results.
USR_IP="${2}"

ADD_LINES () {
    printf "\n"
    printf "${CYAN}+++++++++++++++++++++++++++++++++++++++${NC}\n"
}

INFO_MSG () {
    printf "${YELLOW}INFO:${1}${NC}\n"
}

ERR_MSG () {
    printf "${RED}ERROR:${1}${NC}\n"
}

OK_MSG () {
    printf "${GREEN}TEST SUCEEDED!${NC}\n"
}

FIRWL_MSG () {
    ERR_MSG "PLEASE CHECK YOUR NETWORK OR FIREWALL"
    INFO_MSG "EXITING PLEASE FIX THE ISSUE!"
    exit 1
}

PROXY_MSG () {
    grep -qE  "HTTP.*[4-5][0-9][0-9]" &> /dev/null && INFO_MSG "PLEASE CHECK YOUR PROXY LOGS FOR FURTHER DETAILS" && CHECK_PROXY_LOGS && return
    OK_MSG
}

#Set hosname and protocol.
SET_HOST_PROTO () {
    URL="${1}"
    [ "x${URL}" == "x" ] && ERR_MSG "NOT INPUT RECEIVED" && exit 1;
    HOST=$(echo ${URL} | awk -F'[/:]' '{print $4}')
    PROTO=$(echo ${URL} | awk -F'[/:]' '{print $1}')
}

#Set port to use
SET_PORT () {
    PORT=$(echo ${URL} | awk -F'[/:]' '{print $5}')
    [[ "${PORT}" =~ ^[0-9]+$  ]] && return;
    [ "x${PROTO}" == "xhttp" ] && PORT="80" && return;
    [ "x${PROTO}" == "xhttps" ] && PORT="443" 
}

#DNS Check - usig nslookup check the DNS resolution for the specified host
DNS_CHECK () {
    ADD_LINES
    INFO_MSG "DNS CHECK: - ${HOST}"
    dig +short "${HOST}" -t A &> /dev/null && OK_MSG || FIRWL_MSG
    INFO_MSG "DNS CHECK WITH NAMESERVER @127.0.0.1: - ${HOST}"
    dig @127.0.0.1 +short "${HOST}" -t A &> /dev/null && OK_MSG || FIRWL_MSG
}

#Port Check - using telnet check the connectivity to the specified host with the speicifed port
PORT_CHECK () {
    ADD_LINES
    INFO_MSG "PORT CHECK: - ${PORT}"
    echo "" | telnet ${HOST} ${PORT} -E -d 2> /dev/null | grep "Connected"  &> /dev/null && OK_MSG || FIRWL_MSG
}

#Check SSL certificate of given host
SSL_CHECK () {
    ADD_LINES
    INFO_MSG "SSL CERT CHECK: - ${HOST}"
    echo "" | openssl s_client -brief -state -connect "${HOST}:${PORT}" -verify_hostname ${HOST} -verify_return_error &> /dev/null && OK_MSG || FIRWL_MSG
    ADD_LINES
    INFO_MSG "SSL CERT DATE CHECK: - ${HOST}"
    echo "" | openssl s_client -connect "${HOST}:${PORT}" 2> /dev/null | openssl x509 -noout -dates | grep -oE  "not.*" &> /dev/null && OK_MSG || FIRWL_MSG
}

#Check the connectivity.
CONNECTIVITY_CHECK () {
    ADD_LINES
    INFO_MSG "RESPONSE CHECK: - DIRECT - ${URL}" || FIRWL_MSG
    curl -sS -L -D - ${URL} &> /dev/null && OK_MSG || FIRWL_MSG
}

PROXY_CONNECTIVITY_CHECK () {
    INFO_MSG "PROXY CHECK: - 127.0.0.1:8080"
    ADD_LINES
    INFO_MSG "PORT CHECK: - 8080"
    echo "" | telnet 127.0.0.1 8080 -E -d 2> /dev/null | grep "Connected"  &> /dev/null && OK_MSG || FIRWL_MSG
    ADD_LINES
    INFO_MSG "RESPONSE CHECK: - VIA PROXY - ${URL}"
    curl -x 127.0.0.1:8080 --cacert /usr/local/safesquid/security/ssl/ROOT_X509File.cer -sS -L -D - ${URL} &> /dev/null | PROXY_MSG
}

#Check proxy logs for potential blocks
CHECK_PROXY_LOGS () {
    ADD_LINES
    AWK+=(awk -F\'\\t\')
    AWK+=(\')
    [ x${USR_IP} == x ] && AWK+=(\$24 \~ \/${HOST}\/ \&\& \$6 \~ \/[4-5][0-9][0-9]\/)
    [ x${USR_IP} != x ] && AWK+=(\$11 \~ \/${USR_IP}\/ \&\& \$24 \~ /${HOST}\/ \&\& \$6 \~ \/[4-5][0-9][0-9]\/)
    AWK+=('{print $2, $3, $6, $11, $12, $13, $19, $21, $24, $33, $37}')
    AWK+=(\')
    AWK+=(/var/log/safesquid/extended/extended.log)
    INFO_MSG "CONNECTIONS WITH STATUS CODE RANGE 400-500: - ${HOST}"
    eval "${AWK[*]}" 
}

AUTO_FIND_CLIENT_ID () {
    local CLNT_ID
    while read -r CLNT_ID
    do
        find_client_id.sh ${CLNT_ID} > ${CLNT_ID}.txt
    done < <(CHECK_PROXY_LOGS | awk -F '"' '{print $2}' )
}

MAIN () {
    printf "MAIN EXEC\n"
    SET_HOST_PROTO "${1}"
    SET_PORT
    DNS_CHECK
    PORT_CHECK
    [ "x${PROTO}" == "xhttps" ] && SSL_CHECK
    CONNECTIVITY_CHECK
    PROXY_CONNECTIVITY_CHECK
}

# Loop and listen for user inputs
while true
do
    if read -t 1 INPUT
    then
        MAIN ${INPUT}
    else
        # No input, sleep for a bit to prevent high CPU usage
        sleep 1
    fi
done